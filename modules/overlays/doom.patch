diff --git a/src/amd/vulkan/radv_buffer.c b/src/amd/vulkan/radv_buffer.c
index 3ae483a0381..cfcf553dc57 100644
--- a/src/amd/vulkan/radv_buffer.c
+++ b/src/amd/vulkan/radv_buffer.c
@@ -191,6 +191,7 @@ radv_get_buffer_memory_requirements(struct radv_device *device, VkDeviceSize siz
                                     VkBufferUsageFlags2 usage, VkMemoryRequirements2 *pMemoryRequirements)
 {
    const struct radv_physical_device *pdev = radv_device_physical(device);
+   const struct radv_instance *instance = radv_physical_device_instance(pdev);
 
    pMemoryRequirements->memoryRequirements.memoryTypeBits =
       ((1u << pdev->memory_properties.memoryTypeCount) - 1u) & ~pdev->memory_types_32bit;
@@ -203,7 +204,10 @@ radv_get_buffer_memory_requirements(struct radv_device *device, VkDeviceSize siz
       pMemoryRequirements->memoryRequirements.memoryTypeBits = pdev->memory_types_32bit;
 
    if (flags & VK_BUFFER_CREATE_SPARSE_BINDING_BIT) {
-      pMemoryRequirements->memoryRequirements.alignment = 4096;
+      if (instance->drirc.force_64k_sparse_alignment)
+         pMemoryRequirements->memoryRequirements.alignment = 65536;
+      else
+         pMemoryRequirements->memoryRequirements.alignment = 4096;
    } else {
       if (usage & VK_BUFFER_USAGE_2_PREPROCESS_BUFFER_BIT_EXT)
          pMemoryRequirements->memoryRequirements.alignment = radv_dgc_get_buffer_alignment(device);
diff --git a/src/amd/vulkan/radv_instance.c b/src/amd/vulkan/radv_instance.c
index fc56d1db08f..ef3d1938682 100644
--- a/src/amd/vulkan/radv_instance.c
+++ b/src/amd/vulkan/radv_instance.c
@@ -192,6 +192,7 @@ static const driOptionDescription radv_dri_options[] = {
       DRI_CONF_RADV_SSBO_NON_UNIFORM(false)
       DRI_CONF_RADV_LOWER_TERMINATE_TO_DISCARD(false)
       DRI_CONF_RADV_APP_LAYER()
+      DRI_CONF_RADV_FORCE_64K_SPARSE_ALIGNMENT(false)
    DRI_CONF_SECTION_END
 };
 // clang-format on
@@ -288,6 +289,8 @@ radv_init_dri_options(struct radv_instance *instance)
 
    instance->drirc.lower_terminate_to_discard =
       driQueryOptionb(&instance->drirc.options, "radv_lower_terminate_to_discard");
+
+   instance->drirc.force_64k_sparse_alignment = driQueryOptionb(&instance->drirc.options, "radv_force_64k_sparse_alignment");
 }
 
 static const struct vk_instance_extension_table radv_instance_extensions_supported = {
diff --git a/src/amd/vulkan/radv_instance.h b/src/amd/vulkan/radv_instance.h
index a3b6c29fce7..3688812816c 100644
--- a/src/amd/vulkan/radv_instance.h
+++ b/src/amd/vulkan/radv_instance.h
@@ -74,6 +74,7 @@ struct radv_instance {
       bool disable_dcc_mips;
       bool disable_dcc_stores;
       bool lower_terminate_to_discard;
+      bool force_64k_sparse_alignment;
       char *app_layer;
       uint8_t override_graphics_shader_version;
       uint8_t override_compute_shader_version;
diff --git a/src/util/00-radv-defaults.conf b/src/util/00-radv-defaults.conf
index 3fa34b58bc9..17e4e0e6392 100644
--- a/src/util/00-radv-defaults.conf
+++ b/src/util/00-radv-defaults.conf
@@ -121,6 +121,13 @@ Application bugs worked around in this file:
             <option name="radv_invariant_geom" value="true" />
         </application>
 
+        <application name="DOOM: The Dark Ages" application_name_match="DOOMTheDarkAges">
+            <option name="radv_force_64k_sparse_alignment" value="true" />
+            <option name="radv_zero_vram" value="true" />
+            <option name="radv_legacy_sparse_binding" value="true" />
+            <option name="radv_disable_dcc_stores" value="true" />
+        </application>
+
         <application name="Wolfenstein II" application_name_match="Wolfenstein II The New Colossus">
             <option name="radv_disable_dcc" value="true" />
         </application>
diff --git a/src/util/driconf.h b/src/util/driconf.h
index 0f75aa36a4e..ca0c606e55b 100644
--- a/src/util/driconf.h
+++ b/src/util/driconf.h
@@ -782,6 +782,10 @@
 #define DRI_CONF_RADV_DISABLE_NGG_GS(def) \
    DRI_CONF_OPT_B(radv_disable_ngg_gs, def, "Disable NGG GS on GFX10/GFX10.3.")
 
+#define DRI_CONF_RADV_FORCE_64K_SPARSE_ALIGNMENT(def) \
+   DRI_CONF_OPT_B(radv_force_64k_sparse_alignment, def, \
+                  "Force the alignment of sparse buffers to 64KiB")
+
 /**
  * \brief ANV specific configuration options
  */
