#+TITLE: Emacs Config

Using ~emacs-native-comp-git~ from AUR for improving
performance. Consider running in _daemon mode_, because the startup time
stil not very good.

Nix Modules switches. Setting to default
#+begin_src emacs-lisp
(setq nix-modules nil) 
(setq nix-code-stats nil)
(setq nix-misc nil)
(setq nix-vertico nil)
(setq nix-evil nil)
(setq nix-additional-motions nil)
(setq nix-visual nil)
(setq nix-code-misc nil)
(setq nix-prog-misc nil)
(setq nix-web-misc nil)
(setq nix-web-dap nil)
(setq nix-ts-js nil)
(setq nix-lsp nil)
(setq nix-cpp nil)
(setq nix-haskell nil)
(setq nix-python nil)
(setq nix-latex nil)
(setq nix-rust nil)
(setq nix-go nil)
(setq nix-kotlin nil)
(setq nix-java nil)
(setq nix-org-additional nil)
(setq nix-roam nil)
(setq nix-rss nil)
(setq nix-nix nil)
(setq nix-solidity nil)
(setq nix-proof-assist nil)
(setq nix-julia nil)
(setq nix-exwm nil)
(setq nix-dicts nil)
#+end_src
And load actual enabled modules
#+begin_src emacs-lisp
(load "~/.emacs.d/nix-modules.el") 
#+end_src

Speeding up üêå
- Enabling native compilation
- This sets the garbage collector to invoke every 100Mb instead of default 800Kb
#+begin_src emacs-lisp
(setq comp-deferred-compilation t)
(setq byte-compile-warnings '(cl-functions))
(setq gc-cons-threshold (* 100 1024 1024))
(setq create-lockfiles nil)
(define-key special-event-map [config-changed-event] 'ignore)
#+end_src
* Main config
** Repositories
There is initializes package mangers and initializing ~use-package~ \\
Package config -- see https://melpa.org/#/getting-started. No more
needed because of managing packages using Nix's home-manager.
#+begin_src emacs-lisp
(if (not nix-modules)
    (progn
      (require 'package)
      (add-to-list
       'package-archives
       '("melpa" . "https://melpa.org/packages/")
       t)
      (package-initialize)

      (unless (package-installed-p 'use-package)
	(package-refresh-contents)
	(package-install 'use-package))))
#+end_src
Adding folder with manually added packages, loading file private variables
- store all backups in a single directory
#+begin_src emacs-lisp
(add-to-list 'load-path "~/.emacs.d/lisp/")
(if nix-code-stats
    (load "~/.emacs.d/private.el"))
(setq user-init-file "~/.emacs.d/init.el")
(setq backup-directory-alist
      `(("." . ,(concat user-emacs-directory "backups"))))
#+end_src

Turn into window manager if enabled
#+begin_src emacs-lisp
(if nix-exwm
    (progn
      (require 'exwm)
      (require 'exwm-config)
      (exwm-config-example)))
#+end_src
* Packages
#+begin_src emacs-lisp
(require 'use-package)  
;; Load general to use :general in use-package
(require 'general)
#+end_src
Speeding up again ü¶º
#+begin_src emacs-lisp
(use-package gcmh
  :init
  (gcmh-mode 1))
#+end_src
Profile ü§î
#+begin_src emacs-lisp
(use-package esup
  :if nix-misc)
#+end_src
** Projects
Projects management with ~counsel~ completion
#+begin_src emacs-lisp
(use-package projectile
  :if nix-misc
  :config
  (projectile-mode))
(use-package counsel-projectile
  :if (and nix-misc (not nix-vertico))
  :after (projectile counsel))
#+end_src
Support for nix environment variables
#+begin_src emacs-lisp
(use-package direnv
  :config
  (direnv-mode)) 
#+end_src

Amazing git tool
#+begin_src emacs-lisp
(use-package magit
  :if nix-misc)
#+end_src
Project tree. Settings fonts for ~treemacs~
#+begin_src emacs-lisp
(use-package treemacs
  :if nix-misc
  :config
  (setq treemacs-read-string-input 'from-minibuffer))
(use-package treemacs-evil
  :if (and nix-misc nix-evil)
  :after evil)
(use-package treemacs-projectile
  :if nix-misc
  :after (projectile treemacs))
#+end_src
** Evil mode
~Evil~ with dependecies. Disable Evil mode for some modes
#+begin_src emacs-lisp
(use-package goto-chg
  :if nix-evil)
(use-package evil
  :if nix-evil
  :init
  (setq evil-want-keybinding nil)
  (setq evil-want-integration t)
  :config
  (evil-mode 1)
  (add-to-list 'evil-emacs-state-modes 'elfeed-search)
  (cl-loop for (mode . state) in '(
				   (dired-mode . emacs)
				   (elfeed-search-mode . emacs)
				   (magit-status-mode . emacs))
	   do (evil-set-initial-state mode state))
  )
(use-package undo-tree
  :if nix-misc
  :config
  (global-undo-tree-mode)
  (evil-set-undo-system 'undo-tree)
  :custom
  (undo-tree-auto-save-history nil))
#+end_src
Collection of evil keybindings
#+begin_src emacs-lisp
(use-package evil-collection
  :if nix-evil
  :after evil
  :config
  (evil-collection-init))
#+end_src
Fast search
#+begin_src emacs-lisp
(use-package evil-snipe
  :if nix-evil
  :config
  (evil-snipe-mode +1)
  (evil-snipe-override-mode +1))
#+end_src
Change brakets in evil mode
#+begin_src emacs-lisp
(use-package evil-surround
  :if nix-evil
  :config
  (global-evil-surround-mode 1))
#+end_src
Multicursor
#+begin_src emacs-lisp
(use-package evil-mc
  :if nix-evil
  :config
  (global-evil-mc-mode 1))
#+end_src
** Visual
Tabs
#+begin_src emacs-lisp
(use-package centaur-tabs
  :if nix-visual
  :config
  (centaur-tabs-mode t)
  :custom
  (centaur-tabs-style "bar")
  (centaur-tabs-set-icons t)
  (centaur-tabs-set-bar 'left)
  (centaur-tabs-set-close-button nil)
  (centaur-tabs-set-modified-market t))
#+end_src

Icons
#+begin_src emacs-lisp
(use-package all-the-icons
  :if nix-visual
  :config
  (setq all-the-icons-scale-factor 1.0))
#+end_src
HIghlight todo keywords
#+begin_src emacs-lisp
(use-package hl-todo
  :if nix-visual
  :config
  (global-hl-todo-mode t))
#+end_src
Colorize parenthesis
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :if nix-visual
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src
Searching
#+begin_src emacs-lisp
(use-package avy
  :if nix-additional-motions)
#+end_src
Windows hoping
#+begin_src emacs-lisp
(use-package ace-window
  :if nix-additional-motions
  :config
  (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)))
#+end_src
Dashboard showing on startup
#+begin_src emacs-lisp
(use-package dashboard
  :if nix-visual
  :config
  (dashboard-setup-startup-hook)
  :config
  (setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*")))
  (setq dashboard-center-content t)
  (setq dashboard-startup-banner "~/Wallpapers/Emacs.png")
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-items '((recents  . 5)
                                        ;(bookmarks . 5)
                          (projects . 5)
                          (agenda . 5)
                          (registers . 5)))

  )
#+end_src
Highlight lines chaned according to ~git~
#+BEGIN_SRC emacs-lisp
(use-package diff-hl
  :if nix-visual
  :config
  (global-diff-hl-mode)) 
#+END_SRC
#+begin_src emacs-lisp
(use-package minimap
  :if nix-additional-motions
  :custom
  (minimap-window-location "right")) 
#+end_src
*** Themes
~Doom-modeline~ as modeline
#+begin_src emacs-lisp
(use-package doom-modeline
  :if nix-visual
  :init 
  (doom-modeline-mode 1)
  :config
  (setq doom-modeline-icon t))
#+end_src
Colors from pywal. /Disabled/
#+begin_src emacs-lisp
(use-package ewal
  :if nil
  :init (setq ewal-use-built-in-always nil
              ewal-use-built-in-on-failure-p t
              ewal-built-in-palette "doom-gruvbox"))
(use-package ewal-doom-themes
  :if nil)
#+end_src
*Or* doom theme
#+begin_src emacs-lisp
(use-package doom-themes
  :if nix-visual
  :preface (defvar region-fg nil)
  :config
  (setq doom-themes-treemacs-theme "doom-colors")
  (doom-themes-treemacs-config)
  (doom-themes-org-config)
  :init (load-theme 'doom-ayu-mirage t))
#+end_src
*** Settings
- Visual/behaviour
- Dashboard
- y or n instead of yes-or no
- no annoying bell!
- setting ~ace-window~ keys
- isearch
- Treat =_= as word(~vim~ variant)
#+BEGIN_SRC  emacs-lisp
(defun init-hooks () (global-display-line-numbers-mode 1))
(add-hook 'after-init-hook 'init-hooks)
(scroll-bar-mode 0) ; no scroll bar
(tool-bar-mode 0) ; no tool bar
(menu-bar-mode 0) ; no menu bar
(show-paren-mode 1) ; visualize matching parenthesees
(global-hl-line-mode 1) ; highlight current line
(eldoc-mode 1) ; enable docs in minibuffer
(fset 'yes-or-no-p 'y-or-n-p)
(setq ring-bell-function 'ignore)
(setq case-fold-search t)
(modify-syntax-entry ?_ "w")
(setq display-line-numbers-type 'relative)
#+end_src
** Programming
Code::stats
#+BEGIN_SRC emacs-lisp
(use-package code-stats
  :if nix-code-stats
  :config
  (add-hook 'prog-mode-hook #'code-stats-mode)
  (add-hook 'org-mode-hook #'code-stats-mode)
  (run-with-idle-timer 30 t #'code-stats-sync)
  (add-hook 'kill-emacs-hook (lambda () (code-stats-sync :wait)))  
  )
#+END_SRC
Lama mode
#+begin_src emacs-lisp
(require 'lama-mode) 
#+end_src
Solidity mode
#+begin_src emacs-lisp
(use-package solidity-mode
  :if nix-solidity) 
(use-package company-solidity
  :if nix-solidity
  :hook
  (solidity-mode . iliayar/solidity-company-init)

  :config

  (defun iliayar/solidity-company-init ()
    (set (make-local-variable 'company-backends)
	 (append '((company-solidity)) company-backends))))
(use-package solidity-flycheck
  :if nix-solidity
  :hook
  (solidity-mode . flycheck-mode)

  :init
  (setq solidity-flycheck-solc-checker-active t))
#+end_src

Auto parenthesis
#+begin_src emacs-lisp
(use-package smartparens
  :if nix-code-misc
  :init
  (smartparens-global-mode))
#+end_src
Editconfig support
#+begin_src emacs-lisp
(use-package editorconfig
  :if nix-code-misc
  :config
  (editorconfig-mode 1))
#+end_src
Snippets
#+begin_src emacs-lisp
(use-package yasnippet
  :if nix-code-misc
  :init
  (yas-global-mode 1))
(use-package yasnippet-snippets
  :if nix-code-misc)
#+end_src
Code formatting
#+begin_src emacs-lisp
(use-package format-all
  :if nix-code-misc)
#+end_src
Dockerfile support
#+BEGIN_SRC emacs-lisp
(use-package dockerfile-mode
  :if nix-prog-misc)
#+END_SRC
Package for html live view
#+begin_src emacs-lisp
(use-package impatient-mode
  :if nix-web-misc)
#+end_src
Cool web stuff
#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :if nix-web-misc
  :mode (("\\.js\\'" . web-mode)
         ("\\.jsx\\'" . web-mode)
         ("\\.ts\\'" . web-mode)
         ("\\.tsx\\'" . web-mode)
         ("\\.html\\'" . web-mode)
         ("\\.vue\\'" . web-mode)
	 ("\\.json\\'" . web-mode))
  :commands web-mode
  :config
  (setq web-mode-content-types-alist
	'(("jsx" . "\\.js[x]?\\'")))
  )
#+END_SRC
Debugger
#+begin_src emacs-lisp
(use-package dap-mode
  :if nix-web-dap
  :config
  (require 'dap-chrome)) 
#+end_src
*** Auto completion
Use ~company~ for autocompletion. Add snippets to company backends
#+begin_src emacs-lisp
(use-package company
  :if nix-code-misc
  :init
  (add-hook 'after-init-hook 'global-company-mode)
  :config
  (setq company-dabbrev-downcase 0)
  (setq company-idle-delay 0)
  (setq company-minimum-prefix-length 2)
  (setq company-tooltip-align-annotations t)
  (setq company-auto-commit 'company-auto-commit-p)
  (setq company-auto-complete nil)

  (defun iliayar/company-complete-selection ()
    "Insert the selected candidate or the first if none are selected."
    (interactive)
    (if company-selection
	(company-complete-selection)
      (company-complete-number 1)))

  (setq company-backends 
	'(company-capf 
	  company-yasnippet))

  (defun mars/company-backend-with-yas (backends)
    "Add :with company-yasnippet to company BACKENDS.
  Taken from https://github.com/syl20bnr/spacemacs/pull/179."
    (if (and (listp backends) (memq 'company-yasnippet backends))
	backends
      (append (if (consp backends)
		  backends
		(list backends))
	      '(:with company-yasnippet))))

  (defun add-yas-in-company ()
    (setq company-backends
	  (mapcar #'mars/company-backend-with-yas company-backends)))

  (add-yas-in-company)

  (setq company-math-allow-latex-symbols-in-faces t))
#+end_src
Completion for =M-x= commands. Enabling ~counsel-colors-emacs~.
#+begin_src emacs-lisp
(use-package counsel
  :if (and nix-misc (not nix-vertico))
  :init
  (ivy-mode 1)
  :config
  (require 'facemenu)
  :config
  (setq projectile-completion-system 'ivy)
  (setq ivy-use-selectable-prompt t)
  (setq ivy-initial-inputs-alist nil)

  :general
  ("M-x" 'counsel-M-x)

  (
   :states '(normal visual emacs insert treemacs)
   :prefix "SPC"
   :non-normal-prefix "M-SPC"
   :keymaps 'override
   "bf" 'counsel-switch-buffer
   "cc" 'counsel-compile
   "ce" 'counsel-compilation-errors
   "ff" 'counsel-find-file
   "pf" 'counsel-projectile-find-file))

;; If vertico (consult) is enabled
(use-package consult
  :if (and nix-misc nix-vertico)
  :general
  (
   :states '(normal visual emacs insert treemacs)
   :prefix "SPC"
   :non-normal-prefix "M-SPC"
   :keymaps 'override
   "bf" 'consult-buffer
   "ce" 'consult-compile-error
   "ff" 'find-file
   "pf" 'consult-projectile))
(use-package vertico
  :if (and nix-misc nix-vertico)
  :init (vertico-mode))
(use-package consult-projectile
  :if (and nix-misc nix-vertico)
  :after (consult projectile))
(use-package marginalia
  :if (and nix-misc nix-vertico)
  :after vertico
  :init
  (marginalia-mode))
(use-package orderless
  :if (and nix-misc nix-vertico)
  :custom
  (completion-styles '(orderless basic)))
#+end_src
*** Languages and lsp
Typescript
#+begin_src emacs-lisp
(use-package tide
  :if nix-ts-js
  :after (typescript-mode company flycheck)
  :hook ((typescript-mode . tide-setup)
         (typescript-mode . tide-hl-identifier-mode)
         (before-save . tide-format-before-save))
  :config
  (add-hook 'typescript-mode-hook #'setup-tide-mode)
  (add-to-list 'company-backends '(company-tide)))

(use-package typescript-mode
  :if nix-ts-js)

(use-package rjsx-mode
  :if nix-ts-js)
#+end_src

Coq, ...
#+begin_src emacs-lisp
(use-package proof-general
  :if nix-proof-assist)
(use-package company-coq
  :if nix-proof-assist)
#+end_src


Bison, flex
#+begin_src emacs-lisp
(use-package bison-mode
  :if nix-prog-misc) 
#+end_src

Nix, and completion
#+begin_src emacs-lisp
(use-package nix-mode
  :if nix-nix
  :mode "\\.nix\\'") 
(use-package nixos-options
  :if nix-nix)
(use-package company-nixos-options
  :if nix-nix)
#+end_src

Lsp client. Speeding up üõπ, adding folders to not track. \\
Add to hook =(XXX-mode . lsp)= for auto enabling lsp on /XXX-mode/
#+begin_src emacs-lisp
(use-package  lsp-mode
  :if nix-lsp
  :hook (
         (lsp-mode . lsp-enable-which-key-integration) 
         (c++-mode . lsp)
         )
  :config
  (setq read-process-output-max (* 1024 1024))
  (setq lsp-file-watch-ignored
        '("build"
          "out"
          "target"
          "release"
          ".git"
          ))
  (setq lsp-log-io nil)
  (setq lsp-idle-delay 0.500)
  (setq lsp-lens-enable nil))
(use-package lsp-ui
  :if nix-lsp)
#+end_src
Syntax checking and lsp related errors/warnings. Posfrmae stil sucks
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :if nix-lsp)
#+END_SRC
Lsp integration with several plugins
#+begin_src emacs-lisp
(use-package lsp-treemacs
  :if (and nix-lsp nix-misc))
(use-package lsp-ivy
  :if (and nix-lsp nix-misc))
#+end_src
C++ lsp \\
In /build/ directory run =cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=YES ..=
#+BEGIN_SRC emacs-lisp
(use-package ccls
  :if nix-cpp
  :config
  (setq ccls-initialization-options
        '(:compilationDatabaseDirectory "build"
                                        :cache (:directory "build/.ccls-cache"))))
#+END_SRC
Haskell lsp
#+begin_src emacs-lisp
(use-package lsp-haskell
  :if nix-haskell)
#+end_src
Python lsp
#+begin_src emacs-lisp
(use-package lsp-pyright
  :if nix-python
  :hook (python-mode . (lambda ()
                         (require 'lsp-pyright)
                         (lsp))))  ; or lsp-deferred
(use-package anaconda-mode
  :if nix-python)
(use-package company-anaconda
  :if nix-python)
#+end_src
#+end_src
Lsp for latex
#+begin_src emacs-lisp
(use-package lsp-latex
  :if (and nix-latex nix-lsp))
#+end_src
Julia mode
#+begin_src emacs-lisp
(use-package julia-mode
  :if nix-julia)
(use-package lsp-julia
  :if (and nix-lsp nix-julia)
  :config
  (setq lsp-julia-default-environment "~/.julia/environments/v1.7"))
#+end_src
Rust mode
#+begin_src emacs-lisp
(use-package rustic
  :if nix-rust)
#+end_src
Go mode
#+begin_src emacs-lisp
(use-package go-mode
  :if nix-go)
#+end_src
Haskell mode
#+begin_src emacs-lisp
(use-package haskell-mode
  :if nix-haskell)
#+end_src
Yaml files
#+begin_src emacs-lisp
(use-package yaml-mode
  :if nix-prog-misc)
#+end_src
Kotlin
#+BEGIN_SRC emacs-lisp
(use-package kotlin-mode
  :if nix-kotlin)
#+END_SRC
Graphviz
#+BEGIN_SRC emacs-lisp
(use-package graphviz-dot-mode
  :if nix-prog-misc)
#+END_SRC
Java lsp
#+BEGIN_SRC emacs-lisp
(use-package lsp-java
  :if (and nix-lsp nix-java))
#+END_SRC
*** Settings
- C style settings
- Scrool compilation buffer to the first error instead of end.
#+BEGIN_SRC emacs-lisp
(setq c-default-style "linux")
(setq compilation-scroll-output 'first-error)
#+END_SRC
Compilation windows settings:
- Enable colors in ~*compilation*~ buffer
- Make ~*compilation*~ buffer spawn in bottom
#+begin_src emacs-lisp
(require 'ansi-color)
(defun colorize-compilation-buffer ()
  (toggle-read-only)
  (ansi-color-apply-on-region compilation-filter-start (point))
  (toggle-read-only))
(add-hook 'compilation-filter-hook 'colorize-compilation-buffer)

(defun my-compilation-hook ()
  (when (not (get-buffer-window "*compilation*"))
    (save-selected-window
      (save-excursion
        (let* ((w (split-window-vertically)))
          (select-window w)
          (switch-to-buffer "*compilation*"))))))
(add-hook 'compilation-mode-hook 'my-compilation-hook)

(setq compilation-window-height 10)
#+end_src

** Org-mode
üòã Apply ANSI escape symbols for block output!
#+begin_src emacs-lisp
(defun ek/babel-ansi ()
  (when-let ((beg (org-babel-where-is-src-block-result nil nil)))
    (save-excursion
      (goto-char beg)
      (when (looking-at org-babel-result-regexp)
        (let ((end (org-babel-result-end))
              (ansi-color-context-region nil))
          (ansi-color-apply-on-region beg end))))))
(add-hook 'org-babel-after-execute-hook 'ek/babel-ansi)
#+end_src
Export Org mode to Json
#+BEGIN_SRC emacs-lisp
(use-package ox-json
  :if nix-org-additional)
#+END_SRC
Org headers icons
#+begin_src emacs-lisp
(use-package org-bullets
  :if nix-org-additional)
#+end_src
Loading Export backends
#+BEGIN_SRC emacs-lisp
;; (require 'ox-rss)
(eval-after-load "org"
  (progn
    '(require 'ox-md nil t)
    '(require 'ox-rss nil t)
    '(require 'ox-latex nil t)
    '(require 'ox-json nil t)
    '(require 'ox-reveal nil t)))
#+end_src
Org Roam
#+BEGIN_SRC emacs-lisp
(use-package org-roam
  :if nix-roam
  :init
  (setq org-roam-v2-ack t)
  :custom
  (org-roam-directory "~/org/roam")
  :bind (("C-c n l" . org-roam-buffer-toggle)
	 ("C-c n f" . org-roam-node-find)
	 ("C-c n i" . org-roam-node-insert)
	 ("C-c n d" . org-roam-dailies-capture-today)
	 :map org-mode-map
	 ("C-M-i" . completion-at-point))
  :config
  (setq org-roam-completion-everywhere t)
  (setq org-roam-dailies-direcory "journal/")
  (org-roam-setup))
(use-package websocket
  :if nix-roam)

(if nix-roam
    (progn
      (load-library "org-roam-ui")))

#+END_SRC
*** Settings
Setting visual stuff
#+begin_src emacs-lisp
(setq-default prettify-symbols-alist '(("#+begin_src" . "‚Üì")
                                       ("#+end_src" . "‚Üë")
                                       ("#+BEGIN_SRC" . "‚Üì")
                                       ("#+END_SRC" . "‚Üë")
                                       ("#+end_proof" . "‚¨ú")
                                       ("[ ]" . "ÔÉà")
                                       ("[X]" . "ÔÖä")
                                       ("[-]" . "ÔÖÜ")
                                       ))

(setq org-hide-emphasis-markers t
      org-fontify-done-headline t
      org-ellipsis "‚§∂"
      org-pretty-entities t
      prettify-symbols-unprettify-at-point 'right-edge
      org-directory "~/org"
      org-agenda-files '("~/org")
      org-default-notes-file (concat org-directory "/Notes.org")
      org-highlight-latex-and-related '(latex entities)
      org-todo-keywords '((sequence "EVENT" "DRIFTED" "TODO" "FIXME" "|" "CANCELED" "DONE" ))
      org-src-preserve-indentation t
      org-pretty-entities-include-sub-superscripts nil)

(setq org-todo-keyword-faces
      '(("TODO"     . "magenta")
        ("FIXME"    . "red")
        ("DONE"     . "LawnGreen")
        ("DRIFTED"  . "DeepSkyBlue1")
        ("EVENT"    . "PaleTurquoise")
        ("CANCELED" . "yellow2")))

(font-lock-add-keywords 'org-mode
                        '(("^ *\\([-]\\) "
                           (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "‚Ä¢"))))))
#+end_src
Defining action to execute at entering org-mode, disable marking capture entry as bookmark
#+begin_src emacs-lisp
(add-hook 'org-mode-hook 
          (lambda () 
            (if nix-org-additional
		(progn
		  (org-bullets-mode 1)))
            (org-indent-mode nil)
            (prettify-symbols-mode)
            (set-fontset-font t 'symbol "Noto Color Emoji")
            (progn
              (setq left-margin-width 5)
              (setq right-margin-width 5)
              (set-window-buffer nil (current-buffer)))))

(setq org-capture-bookmark nil)
#+END_SRC
Increse readability of latex preview in org-mode
#+begin_src emacs-lisp
(setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))
#+end_src
Org mode file associations
#+BEGIN_SRC emacs-lisp
(setq org-file-apps
      (append '(
                ("\\.pdf\\'" . "zathura %s")
                ) org-file-apps ))
#+END_SRC
- Add /dot/ to org-babel
- Enable redisplaying images after executing block
- Auto confirm evaluating /dot/
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-src-lang-modes (quote ("dot" . graphviz-dot)))
(org-babel-do-load-languages
 'org-babel-load-languages
 '((dot . t)
   (gnuplot . t)
   (org . t)
   (haskell . t)
   (python . t)
   (js . t)
   (shell . t)
   (julia . t)
   (sql . t)
;;   (ipython . t)
   ))
(add-hook 'org-babel-after-execute-hook 'org-redisplay-inline-images)
(setq org-confirm-babel-evaluate nil)
(setq org-src-tab-acts-natively t)
#+END_SRC
Export settings
#+BEGIN_SRC emacs-lisp
(setq org-html-htmlize-output-type 'inline-css)
(setq org-html-head-include-default-style nil)
#+END_SRC
Setting up spell checking. Working for both laguages, but only one in one buffer.
#+BEGIN_SRC emacs-lisp
(if nix-dicts
  (progn
(with-eval-after-load "ispell"
  (setq ispell-program-name "hunspell")
  (setq ispell-dictionary "ru_RU,en_US")
  (ispell-set-spellchecker-params)
  (ispell-hunspell-add-multi-dic "ru_RU,en_US"))))
#+END_SRC
Inserting last screenshot
#+BEGIN_SRC emacs-lisp
(defun my/org-insert-last-screenshot ()
  (interactive)
  (setq screenshots-dir "~/Pictures/screenshots/")
  (let ((cur-dir (read-directory-name "Copy screenshot to: "))
        (screenshot (car (last (directory-files screenshots-dir)))))
    (copy-file (concat screenshots-dir screenshot) (concat cur-dir screenshot) t)
    (org-insert-link nil (concat "./" (file-relative-name (concat cur-dir screenshot) default-directory))))
  (org-redisplay-inline-images))
#+END_SRC
Set Org-mode exporting backends
#+BEGIN_SRC emacs-lisp
(setq org-export-backends '(ascii html icalendar latex md odt))
#+END_SRC
*** Publishing
Publishing for:
- Main site
- University consepcts (exporting to pdf and uploading on server)
#+BEGIN_SRC emacs-lisp
(defun my-conspects-header (arg)
  "<style>#forkongithub a{background:#000;color:#fff;text-decoration:none;font-family:arial,sans-serif;text-align:center;font-weight:bold;padding:5px 40px;font-size:1rem;line-height:2rem;position:relative;transition:0.5s;}#forkongithub a:hover{background:#c11;color:#fff;}#forkongithub a::before,#forkongithub a::after{content:\"\";width:100%;display:block;position:absolute;top:1px;left:0;height:1px;background:#fff;}#forkongithub a::after{bottom:1px;top:auto;}@media screen and (min-width:800px){#forkongithub{position:fixed;display:block;top:0;right:0;width:200px;overflow:hidden;height:200px;z-index:9999;}#forkongithub a{width:200px;position:absolute;top:60px;right:-60px;transform:rotate(45deg);-webkit-transform:rotate(45deg);-ms-transform:rotate(45deg);-moz-transform:rotate(45deg);-o-transform:rotate(45deg);box-shadow:4px 4px 10px rgba(0,0,0,0.8);}}</style><span id=\"forkongithub\"><a href=\"https://github.com/iliayar/ITMO\">Fork me on GitHub</a></span>")

(setq org-publish-project-alist
      '(
        ("org-mainsite"
         :base-directory "~/Repos/MainSite/public/notes"
         :base-extension "org"
         :exclude "level-[0-9]*.org"
         :publishing-directory "/ssh:iliayar@iliayar.ru:/var/www/mainsite/public/public-notes"
         :html-html5-fancy t
         ;; :html-link-home "https://iliayar.ru/public-notes/index.html"
         :html-validation-link nil
         :html-postamble "<hr><a href=\"/public-notes/index.html\">Home Page</a><span style=\"float: right\"><a href=\"/public-notes/blog.xml\"><i class=\"fas fa-rss\"></i></a> <a href=\"https://github.com/iliayar/iliayar\"><i class=\"fab fa-github\"></i></a></span>"
         :recursive t
         :publishing-function org-html-publish-to-html
         :headline-levels 4             ; Just the default for this project.
         :auto-preamble t
         )
        ("rss-mainsite"
         :base-directory "~/Repos/MainSite/public/notes"
         :base-extension "org"
         :exclude ".*"
         :include ("blog.org")
         :publishing-directory "/ssh:iliayar@iliayar.ru:/var/www/mainsite/public/public-notes"
         :rss-extension "xml"
         :section-numbers nil
         :html-link-home "https://iliayar.ru/public-notes/"
         :html-link-use-abs-url t
         :html-link-org-files-as-html t
         :output-file "rss"
         :recursive nil
         :publishing-function org-rss-publish-to-rss
         )
        ("static-mainsite"
         :base-directory "~/Repos/MainSite/public/notes"
         :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf\\|pdf"
         :publishing-directory "/ssh:iliayar@iliayar.ru:/var/www/mainsite/public/public-notes"
         :recursive t
         :publishing-function org-publish-attachment
         )
        ("mainsite" :components ("org-mainsite" "rss-mainsite" "static-mainsite"))

        ("org-conspects"
         :base-directory "~/Repos/ITMO"
         :exclude ".*[^E].org"
         :publishing-directory "/ssh:iliayar@iliayar.ru:/var/www/mainsite/public/public-notes/conspects"
         :recursive t
         :html-postamble "<hr><a href=\"/public-notes/index.html\">Home Page</a><span style=\"float: right\"><a href=\"https://t.me/iliayar\"><i class=\"fab fa-telegram-plane\"></i></a> <a href=\"https://github.com/iliayar/ITMO\"><i class=\"fab fa-github\"></i></a></span><br><a href=\"/public-notes/conspects/README.html\">Conspects Home Page</a>"
         :publishing-function org-html-publish-to-html
         :headline-levels 4             ; Just the default for this project.
         ;; :html-preamble my-conspects-header
         )
        ("pdfs-conspects"
         :base-directory "~/Repos/ITMO"
         :base-extension "org"
         :exclude "README.org\\|level-[0-9]*.org\\|level-subj.org"
         :publishing-directory "/ssh:iliayar@iliayar.ru:/var/www/mainsite/public/public-notes/conspects"
         :recursive t
         :publishing-function org-latex-publish-to-pdf
         )
        ("conspects" :components ("org-conspects" "pdfs-conspects"))
        ))
#+END_SRC
*** LaTeX
Org mode to LaTeX and pdf
Setting packages
#+BEGIN_SRC emacs-lisp
(if nix-latex 
  (progn
(setq org-latex-packages-alist '(
                                 ("T1, T2A" "fontenc" t)
                                 ("lutf8" "luainputenc" t)
                                 ("english,russian" "babel" t)
                                 ("" "minted" t)
                                 ("" "graphicx" t)
                                 ("" "longtable" t)
                                 ("" "hyperref" t)
                                 ("" "xcolor" t)
                                 ("" "natbib" t)
                                 ("" "amssymb" t)
                                 ("" "stmaryrd" t)
                                 ("" "amsmath" t)
                                 ("" "caption" t)
                                 ("" "mathtools" t)
                                 ("" "amsthm" t)
                                 ("" "tikz" t)
                                 ("" "fancyhdr" t)
                                 ("" "lastpage" t)
                                 ("" "titling" t)
                                 ("" "grffile" t)
                                 ("" "extarrows" t)
                                 ("" "wrapfig" t)
                                 ("" "algorithm" t)
                                 ("" "algorithmic" t)
                                 ("" "lipsum" t)
                                 ("" "rotating" t)
                                 ("" "placeins" t)
                                 ("normalem" "ulem" t)
                                 ("" "amsmath" t)
                                 ("" "textcomp" t)
                                 ("" "svg" t)
                                 ("" "capt-of" t)))
;; Reset default value. For debugging
(custom-reevaluate-setting 'org-latex-classes)
(with-eval-after-load 'ox-latex
  (progn 
    (add-to-list 'org-latex-classes
                 (list "general"
                       "
  \\documentclass[english]{article}
  [NO-DEFAULT-PACKAGES]
  [PACKAGES]
  [EXTRA]
  \\usepackage{geometry}
  \\geometry{a4paper,left=2.5cm,top=2cm,right=2.5cm,bottom=2cm,marginparsep=7pt, marginparwidth=.6in}
  \\input{~/.emacs.d/preamble.sty}
  "
                       '("\\section{%s}" . "\\section*{%s}")
                       '("\\subsection{%s}" . "\\subsection*{%s}")
                       '("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                       '("\\paragraph{%s}" . "\\paragraph*{%s}")
                       '("\\subparagraph{%s}" . "\\subparagraph*{%s}")
                       ))
    (add-to-list 'org-latex-classes
                 (list "lectures"
                       "
  \\documentclass[oneside]{book}
  [NO-DEFAULT-PACKAGES]
  [PACKAGES]
  [EXTRA]
  \\addto\\captionsrussian{\\renewcommand{\\chaptername}{–õ–µ–∫—Ü–∏—è}}
  \\renewcommand{\\leftmark}{}
  \\usepackage[a4paper, total={6in, 8in}]{geometry}
  \\input{~/.emacs.d/preamble.sty}
  \\fancyhead[L]{\\leftmark}
  "
                       '("\\chapter*{%1$s}\\renewcommand{\\leftmark}{%1$s}\\addcontentsline{toc}{chapter}{%1$s}\\stepcounter{chapter}" . "\\chapter{%s}")
                       '("\\section{%s}" . "\\section*{%s}")
                       '("\\subsection{%s}" . "\\subsection*{%s}")
                       '("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                       '("\\paragraph{%s}" . "\\paragraph*{%s}")
                       '("\\subparagraph{%s}" . "\\subparagraph*{%s}")
                       ))))
(setq org-latex-listings 'minted
      org-latex-pdf-process
      '("pdflatex -shell-escape --synctex=1 -interaction nonstopmode -output-directory %o %f"
        "pdflatex -shell-escape --synctex=1 -interaction nonstopmode -output-directory %o %f"
        "pdflatex -shell-escape --synctex=1 -interaction nonstopmode -output-directory %o %f"))
(setq org-latex-minted-options
      '(("frame" "lines") ("linenos=true") ("mathescape")))
(add-to-list 'org-latex-minted-langs '(ipython "python"))))
#+END_SRC
** Common
RSS reader. Settings colors for each tag.
#+begin_src emacs-lisp
(use-package elfeed
  :if nix-rss
  :custom
  (rmh-elfeed-org-files (list "~/org/elfeed.org"))
  :config
  (defface unread-tag-face '((t :foreground "light grey")) "Marks unread")
  (defface news-tag-face '((t :foreground "light yellow")) "Mark news")
  (defface ctf-tag-face '((t :foreground "red")) "Mark CTF events")
  (defface blog-tag-face '((t :foreground "cyan")) "Mark posts")
  (defface github-tag-face '((t :foreground "orange")) "Mark Github feed")
  (defface starred-tag-face '((t :foreground "yellow")) "Mark favourite posts")
  (defface videos-tag-face '((t :foreground "tomato")) "Mark favourite posts")
  (setq elfeed-search-face-alist
        '(
          (starred starred-tag-face)
          (ctf ctf-tag-face)
          (blog blog-tag-face)
          (news news-tag-face)
          (github github-tag-face)
          (videos videos-tag-face)
          (unread elfeed-search-unread-title-face)
          ))

  (defalias 'elfeed-toggle-star
    (elfeed-expose #'elfeed-search-toggle-all 'starred))
  )
(use-package elfeed-org
  :if nix-rss
  :init
  (elfeed-org))
(use-package elfeed-goodies
  :if nix-rss
  :init
  (elfeed-goodies/setup))
#+end_src
Mail client
#+BEGIN_SRC emacs-lisp
(use-package mu4e
  :if nil
  :ensure nil
  :config
  (setq user-full-name "Ilya Yaroshevskiy")
  
  (setq mu4e-change-filenames-when-moving t)
  (setq mu4e-update-interval (* 10 60))
  (setq mu4e-maildir "~/Mail")
  (setq mu4e-headers-skip-duplicates t)
  (setq mu4e-attachment-dir "~/Downloads")
  (setq mu4e-sent-messages-behavior 'delete)
  (setq mu4e-use-fancy-chars t)
  (setq message-send-mail-function 'smtpmail-send-it)
  (setq mu4e-completing-read-function 'ivy-completing-read)

  (setq mu4e-contexts
        (list
         ;; Personal context
         (make-mu4e-context
          :name "personal"
          :match-func (lambda (msg) (when msg
                                      (string-prefix-p "/personal" (mu4e-message-field msg :maildir))))
          :vars '((mu4e-sent-folder . "/personal/[Gmail]/Sent Mail")
                  (mu4e-drafts-folder . "/personal/[Gmail]/Drafts")
                  ;; (mu4e-refile-folder . "/personal/[Gmail]/All Mail")
                  (mu4e-trash-folder . "/personal/[Gmail]/Trash")
                  (user-mail-address . "iliayar3@gmail.com")
                  (mu4e-get-mail-command . "mbsync personal")
                  (smtpmail-smtp-server . "smtp.gmail.com")
                  (smtpmail-smtp-service . 465)
                  (smtpmail-stream-type . ssl)
                  (smtpmail-smtp-user . "iliayar3@gmail.com")
                  (mu4e-bookmarks . (("maildir:/personal/Inbox" "Inbox" ?i)
                                     ("maildir:/personal/[Gmail]/Important" "Important" ?!)))
                  ))
         ;; Cock context
         (make-mu4e-context
          :name "cock"
          :match-func (lambda (msg) (when msg
                                      (string-prefix-p "/cock" (mu4e-message-field msg :maildir))))
          :vars '(
                  (mu4e-sent-folder . "/cock/Sent")
                  ;; (mu4e-drafts-folder . "/cock/Drafts")
                  (mu4e-refile-folder . "/cock/Junk")
                  (mu4e-trash-folder . "/cock/Trash")
                  (user-mail-address . "iliayar@cock.li")
                  (mu4e-get-mail-command . "mbsync cock")
                  (smtpmail-smtp-server . "mail.cock.li")
                  (smtpmail-smtp-service . 465)
                  (smtpmail-stream-type . ssl)
                  (smtpmail-smtp-user . "iliayar@cock.li")
                  (mu4e-bookmarks . (("maildir:/cock/Inbox" "Inbox" ?i)
                                     ;; ("maildir:/personal/[Gmail]/Important" "Important" ?!)
                                     ))
                  ))
         ;; University context
         (make-mu4e-context
          :name "university"
          :match-func (lambda (msg) (when msg
                                      (string-prefix-p "/university" (mu4e-message-field msg :maildir))))
          :vars '(
                  (mu4e-sent-folder . "/university/Sent")
                  ;; (mu4e-drafts-folder . "/cock/Drafts")
                  (mu4e-refile-folder . "/university/Junk")
                  (mu4e-trash-folder . "/university/Trash")
                  (user-mail-address . "iliayar@niuitmo.ru")
                  (mu4e-get-mail-command . "mbsync university")
                  (smtpmail-smtp-server . "smtp-mail.outlook.com")
                  (smtpmail-smtp-service . 587)
                  (smtpmail-stream-type . ssl)
                  (smtpmail-smtp-user . "iliayar@niuitmo.ru")
                  (mu4e-bookmarks . (("maildir:/cock/Inbox" "Inbox" ?i)
                                     ;; ("maildir:/personal/[Gmail]/Important" "Important" ?!)
                                     ))
                  ))
         )))
#+END_SRC


Emacs everywher!
#+begin_src emacs-lisp
(use-package emacs-everywhere
  :if nix-additional-motions)
#+end_src

* Keybindings
#+begin_src emacs-lisp
(general-define-key
 :keymaps 'company-active-map
 "<tab>"     'yas-expand
 "<backtab>" 'iliayar/company-complete-selection)

(general-define-key
 :map 'org-mode-map
 "C-c C-x i" 'my/org-insert-last-screenshot)

(define-key isearch-mode-map (kbd "<down>") 'isearch-ring-advance)
(define-key isearch-mode-map (kbd "<up>") 'isearch-ring-retreat)
#+end_src
Elfeed hydra binddings
#+begin_src emacs-lisp
(if (and nix-additional-motions nix-rss)
  (progn
(defhydra elfeed-search-view-hydra (:color blue :hint t)
  ("d" (elfeed-search-set-filter nil) "Default")
  ("f" (elfeed-search-set-filter "+starred") "Favourite")
  ("a" (elfeed-search-set-filter "") "All"))))
#+end_src
Bindings using ~general~ package
Helper functions for university labs
#+begin_src emacs-lisp
(defun run-nix-lab ()
  (interactive)
  (shell-command (concat "labRun "
			 (if (eq lab-file nil)
			     (buffer-file-name)
			   lab-file))))

(defun lab-init ()
  (interactive)
  (let
      ((prog (selected-window)))
    (setq lab-file (buffer-file-name))
    (split-window-right)
    (next-window-any-frame)
    (find-file (getenv "inputFile"))
    (split-window-below)
    (next-window-any-frame)
    (find-file (getenv "outputFile"))
    (auto-revert-mode)
    (select-window prog)))

(defun lab-reinit ()
  (interactive)
  (setq lab-file (buffer-file-name)))
#+end_src

#+begin_src emacs-lisp
(general-define-key
 :state '(normal)
 :keymaps '(org-mode-map)
 "<tab>" 'org-cycle)
(general-define-key
 :states '(normal visual)
 :keymaps 'override
 "gsx" 'lsp-ui-peek-find-references
 "gsd" 'lsp-ui-peek-find-definitions
 "gt"  'centaur-tabs-forward
 "gT"  'centaur-tabs-backward
 "C-=" 'format-all-buffer)

(general-define-key
 :states '(normal visual emacs insert treemacs)
 :prefix "SPC"
 :non-normal-prefix "M-SPC"
 :keymaps 'override
 "bb" 'ibuffer
 "ca" 'lsp-execute-code-action
 "ck" 'kill-compilation
 "cd" 'kill-compilation-buffer
 "cl" 'comment-or-uncomment-region
 "cr" 'lsp-rename
 "gl" 'avy-goto-line
 "gr" 'revert-buffer
 "gs" 'avy-goto-char-timer
 "oa" 'org-agenda
 "og" 'magit
 "or" 'elfeed
 "op" 'treemacs
 "om" 'mu4e
 "oi" 'minimap-mode
 "pc" 'projectile-compile-project
 "pp" 'projectile-switch-project
 "pl" 'org-latex-preview
 "pi" 'org-toggle-inline-images
 "rr" 'rustic-cargo-run
 "rl" 'run-nix-lab
 "sl" 'lsp
 "sr" 'lsp-workspace-restart
 "ss" 'lsp-workspace-shutdown
 "sd" 'lsp-describe-thing-at-point
 "se" 'lsp-ui-flycheck-list
 "tt" 'treemacs-select-window
 "wd" 'delete-window
 "wk" 'kill-buffer-and-window
 "wr" 'hydra-window-resize-menu/body
 "ww" 'ace-window)

(general-define-key
 :states '(visual)
 :keymap 'evil-mc-key-map
 "A" 'evil-mc-make-cursor-in-visual-selection-end
 "I" 'evil-mc-make-cursor-in-visual-selection-beg
 )

(general-define-key
 :states '(normal visual insert)
 :prefix "SPC"
 :non-normal-prefix "M-SPC"
 :keymaps 'latex-mode-map
 "si" 'latex-insert-block
 )

(general-define-key
 :keymaps 'elfeed-search-mode-map
 "f" 'elfeed-toggle-star
 "v" 'elfeed-search-view-hydra/body)
#+end_src
Hydra
#+begin_src emacs-lisp
(if nix-additional-motions
  (progn
(defhydra hydra-window-resize-menu (:color red
                                           :hint nil)
  "
    Window Resize
    -------------
         /\\
          _k_
    < _h_     _l_ >
          _j_
          v
    "
  ("h" evil-window-decrease-width)
  ("l" evil-window-increase-width)
  ("k" evil-window-decrease-height)
  ("j" evil-window-increase-height)
  ("c" nil "Cancel"))))
#+end_src

* Other
** Faces
#+begin_src emacs-lisp
(setq default-family "Fira Code")
(setq default-height 95)
(custom-set-faces
 `(ivy-current-match ((t (:foreground "white smoke" :background "dark orange" :extend t))))
 `(treemacs-root-face ((t (:family ,default-family :height ,default-height))))
 `(treemacs-git-unmodified-face ((t (:family ,default-family :height ,default-height))))
 `(treemacs-git-modified-face ((t (:family ,default-family :height ,default-height))))
 `(treemacs-git-renamed-face ((t (:family ,default-family :height ,default-height))))
 `(treemacs-git-ignored-face ((t (:family ,default-family :height ,default-height))))
 `(treemacs-git-untracked-face ((t (:family ,default-family :height ,default-height))))
 `(treemacs-git-added-face ((t (:family ,default-family :height ,default-height))))
 `(treemacs-git-conflict-face ((t (:family ,default-family :height ,default-height))))
 `(treemacs-directory-face ((t (:family ,default-family :height ,default-height))))
 `(treemacs-directory-collapsed-face ((t (:family ,default-family :height ,default-height))))
 `(treemacs-file-face ((t (:family ,default-family :height ,default-height))))
 `(treemacs-tags-face ((t (:family ,default-family :height ,default-height))))
 `(default ((t (:family ,default-family :height ,default-height))))
 `(italic ((t (:slant italic :family "Ubuntu Mono" :height ,default-height))))
 `(org-block ((t (:extend t))))
 `(org-block-begin-line ((t (:extend t :overline nil :underline t))))
 `(org-block-end-line ((t (:inherit org-block-begin-line :extend t :overline t :underline nil))))
 `(org-document-title ((t (:weight bold :height 1.3))))
 `(org-ellipsis ((t (:foreground "red"))))
 `(org-footnote ((t (:weight extra-bold :height 0.7))))
 `(org-latex-and-related ((t (:inherit nil :foreground "tomato" :weight bold))))
 `(org-level-1 ((t (:inherit outline-1 :extend t :underline t :height 1.2))))
 `(org-level-2 ((t (:inherit outline-2 :extend t :height 1.1))))
 `(org-link ((t (:inherit link))))
 `(org-tag ((t (:slant italic :weight normal :family "Ubuntu Mono"))))
 `(org-verbatim ((t (:box (:line-width (2 . 2) :color "dim gray" :style released-button)))))
 `(outline-1 ((t (:extend t :weight bold)))))
#+end_src
