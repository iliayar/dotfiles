* Emacs Configs
Using /emacs-native-comp-git/ from AUR for improving performance

Speeding up üêå
#+begin_src emacs-lisp
(setq gc-cons-threshold 100000000)
#+end_src


** Main config
*** Repositories
There is initializes package mangers and some other stuff \\
Package config -- see https://melpa.org/#/getting-started
#+begin_src emacs-lisp
(require 'package)
(add-to-list
 'package-archives
 '("melpa" . "https://melpa.org/packages/")
 t)
#+end_src
#+begin_src emacs-lisp
  (package-initialize)

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
#+end_src
#+begin_src emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/lisp/")

  (setq evil-want-keybinding nil)

  (setq comp-deferred-compilation t)
#+end_src
** Packages
*** Auto completion
Use /company/ for autocompletion
#+begin_src emacs-lisp
(use-package company
  :ensure t
  :init
  (add-hook 'after-init-hook 'global-company-mode)
  :config
  (setq company-dabbrev-downcase nil)
  (setq company-idle-delay 0)
  (setq company-minimum-prefix-length 1)
  (setq company-tooltip-align-annotations t))
#+end_src
Lsp backend for /company/
#+begin_src emacs-lisp
(use-package company-lsp
  :ensure t
  :config
  (push 'company-lsp company-backends)
  (setq company-lsp-enable-snippet t)
  (setq lsp-enable-snippet t))
#+end_src
Pretty icons for /company/
#+begin_src emacs-lisp
(use-package company-box
  :ensure t
  :hook (company-mode . company-box-mode)
  :config
  (push '(company-yasnippet . (:all "lime green" :selected
    (:background "black"))) company-box-backends-colors))
#+end_src
Fuzzy match for /company/ \\
Completion for commands
#+begin_src emacs-lisp
(use-package counsel
  :ensure t
  :init
  (ivy-mode 1))
#+end_src
Keys hints
#+begin_src emacs-lisp
(use-package which-key
  :ensure t
  :config
  (which-key-mode 1))
#+end_src
*** Web
Package for html live view
#+begin_src emacs-lisp
(use-package impatient-mode
  :ensure t)
#+end_src
Cool web stuff
#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :ensure t)
#+END_SRC
*** Projects
Projects management with /counsel/ completion
#+begin_src emacs-lisp
(use-package projectile
  :ensure t
  :config
  (projectile-mode))
(use-package counsel-projectile
  :ensure t)
#+end_src
Amazing git tool
#+begin_src emacs-lisp
(use-package magit
  :ensure t)
#+end_src
Project tree
#+begin_src emacs-lisp
(use-package treemacs
  :ensure t)
(use-package treemacs-evil
  :ensure t)
(use-package treemacs-projectile
  :ensure t)
#+end_src
Start dashboard buffer
#+begin_src emacs-lisp
(use-package dashboard
  :ensure t
  :config
  (dashboard-setup-startup-hook))
#+end_src
*** Evil mode
Evil with dependecies
#+begin_src emacs-lisp
(use-package undo-tree
  :ensure t)
(use-package goto-chg
  :ensure t)
(use-package evil
  :ensure t
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  :config
  (evil-mode 1))
#+end_src
Collection of evil keybindings
#+begin_src emacs-lisp
(use-package evil-collection
  :after evil
  :ensure t
  :config
  (evil-collection-init))
#+end_src
Fast search
#+begin_src emacs-lisp
(use-package evil-snipe
  :ensure t
  :config
  (evil-snipe-mode +1)
  (evil-snipe-override-mode +1))
#+end_src
Change brakets in evil mode
#+begin_src emacs-lisp
(use-package evil-surround
  :ensure t
  :config
  (global-evil-surround-mode 1))
#+end_src
Multicursor
#+begin_src emacs-lisp
(use-package evil-multiedit
  :ensure t)
(use-package evil-mc
  :ensure t
  :config
  (global-evil-mc-mode 1))
#+end_src
*** Visual
Icons
#+begin_src emacs-lisp
(use-package all-the-icons
 :ensure t)
#+end_src
HIghlight todo keywords
#+begin_src emacs-lisp
(use-package hl-todo
  :ensure t
  :config
  (global-hl-todo-mode t))
#+end_src
Colorize parenthesis
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :ensure t
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src
Org headers icons
#+begin_src emacs-lisp
(use-package org-bullets
  :ensure t)
#+end_src
Emai client
#+begin_src emacs-lisp
(add-to-list 'load-path "/usr/share/emacs/site-lisp/mu4e")
(require 'mu4e)
#+end_src

*** Programming
Code::stats
#+BEGIN_SRC emacs-lisp
  (use-package code-stats
    :ensure t)
#+END_SRC

Auto parenthesis
#+begin_src emacs-lisp
(use-package smartparens
  :ensure t
  :init
  (smartparens-global-mode))
#+end_src
Editconfig support
#+begin_src emacs-lisp
(use-package editorconfig
  :ensure t
  :config
  (editorconfig-mode 1))
#+end_src
Snippets
#+begin_src emacs-lisp
(use-package yasnippet
  :ensure t
  :init
  (yas-global-mode 1))
(use-package yasnippet-snippets
  :ensure t)
#+end_src
Code formatting
#+begin_src emacs-lisp
(use-package format-all
  :ensure t)
#+end_src
Searching
#+begin_src emacs-lisp
(use-package avy
  :ensure t)
#+end_src
Windows hoping
#+begin_src emacs-lisp
(use-package ace-window
  :ensure t)
#+end_src
Dockerfile support
#+BEGIN_SRC emacs-lisp
  (use-package dockerfile-mode
    :ensure t)
#+END_SRC
**** Languages and lsp
lsp client
#+begin_src emacs-lisp
  (use-package  lsp-mode
    :hook (
          (lsp-mode . lsp-enable-which-key-integration) 
          (c++-mode . lsp)
          )
    :ensure t)
#+end_src
Speeding up lps-mode
#+begin_src emacs-lisp
(setq read-process-output-max (* 4 (* 1024 1024)))
#+end_src
C style settings
#+BEGIN_SRC emacs-lisp
(setq c-default-style "linux")
#+END_SRC
Add to hook =(XXX-mode . lsp)= for auto enabling lsp on /XXX-mode/ \\
Lsp integration with several plugins
#+begin_src emacs-lisp
(use-package flycheck
  :ensure t)
(use-package lsp-ui
  :ensure t)
(use-package lsp-treemacs
  :ensure t)
(use-package lsp-ivy
  :ensure t)
#+end_src
C++ lsp \\
In /build/ directory run =cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=YES ..=
#+BEGIN_SRC emacs-lisp
     (use-package ccls
       :ensure t
       :config
       (setq ccls-executable "/usr/bin/ccls")
       (setq ccls-initialization-options
             '(:compilationDatabaseDirectory "build"
               :cache (:directory "build/.ccls-cache"))))
#+END_SRC
Haskell lsp
#+begin_src emacs-lisp
  (use-package lsp-haskell
    :ensure t)
#+end_src
Python lsp
#+begin_src emacs-lisp
  (use-package lsp-pyright
    :ensure t
    :hook (python-mode . (lambda ()
                            (require 'lsp-pyright)
                            (lsp))))  ; or lsp-deferred
  (use-package anaconda-mode
    :ensure t)
  (use-package company-anaconda
    :ensure t)
#+end_src
Lsp for latex
#+begin_src emacs-lisp
  (use-package lsp-latex
    :ensure t)
#+end_src
Rust mode
#+begin_src emacs-lisp
  (use-package rustic
    :ensure t)
#+end_src

Go mode
#+begin_src emacs-lisp
  (use-package go-mode
    :ensure t)
#+end_src
Haskell mode
#+begin_src emacs-lisp
  (use-package haskell-mode
    :ensure t)
#+end_src
Yaml files
#+begin_src emacs-lisp
  (use-package yaml-mode
    :ensure t)
#+end_src
Kotlin
#+BEGIN_SRC emacs-lisp
  (use-package kotlin-mode
    :ensure t)
#+END_SRC
Graphviz
#+BEGIN_SRC emacs-lisp
(use-package graphviz-dot-mode
  :ensure t)
#+END_SRC
Ipython for org babel
#+BEGIN_SRC emacs-lisp
  (use-package ob-ipython
    :ensure t)
#+END_SRC
Java lsp
#+BEGIN_SRC emacs-lisp
  (use-package lsp-java
    :ensure t)
#+END_SRC
*** Themes
/Doom-modeline/ as modeline
#+begin_src emacs-lisp
(use-package doom-modeline
  :ensure t
  :init 
  (doom-modeline-mode 1)
  :config
  (setq doom-modeline-icon t))
#+end_src
Colors from pywal
#+begin_src emacs-lisp
(use-package ewal
  :ensure t
  :init (setq ewal-use-built-in-always nil
              ewal-use-built-in-on-failure-p t
              ewal-built-in-palette "doom-gruvbox"))
(use-package ewal-doom-themes
  :ensure t)
#+end_src
*Or* doom theme
#+begin_src emacs-lisp
  (use-package doom-themes
    :ensure t
    :preface (defvar region-fg nil)
    (setq doom-themes-treemacs-theme "doom-colors")
    (doom-themes-treemacs-config)
    (doom-themes-org-config)
    :init (load-theme 'doom-monokai-classic t))
#+end_src
*** Keybingings
Convenient keybindings
#+begin_src emacs-lisp
(use-package general
  :ensure t)
#+end_src
Cinstructing menus
#+begin_src emacs-lisp
(use-package hydra
  :ensure t)
#+end_src
*** Org-mode
theromes in LaTeX with org syntax
#+begin_src emacs-lisp
(use-package org-special-block-extras
  :ensure t)
#+end_src
Reveal.js for presentations
#+BEGIN_SRC emacs-lisp
  (use-package ox-reveal
    :ensure t)
#+END_SRC
** Variables and functions
*** Snippets
Add snippets to company backends
#+begin_src emacs-lisp
  (setq company-backends 
    '(company-capf 
      company-bbdb 
      company-clang 
      company-keywords 
      company-yasnippet 
      company-lsp 
      company-files 
      ;; company-ctags
      company-anaconda))

  (defun mars/company-backend-with-yas (backends)
    "Add :with company-yasnippet to company BACKENDS.
  Taken from https://github.com/syl20bnr/spacemacs/pull/179."
    (if (and (listp backends) (memq 'company-yasnippet backends))
      backends
      (append (if (consp backends)
                backends
                (list backends))
        '(:with company-yasnippet))))

  (defun add-yas-in-company ()
    (setq company-backends
      (mapcar #'mars/company-backend-with-yas company-backends)))

  (add-yas-in-company)
#+end_src
*** Org mode
General Org mode setup
Bullets, packages
#+BEGIN_SRC emacs-lisp
  ;; Org-mode
  (setq org-hide-emphaisi-markers t)
  (add-hook 'org-mode-hook 
            (lambda () 
              (org-bullets-mode 1)
              (org-indent-mode nil)
  ;; Uncomment for enabling auto preview LaTeX in org-mode
  ;;            (add-hook 'post-command-hook 'cw/org-auto-toggle-fragment-display t)
  ))

  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "‚Ä¢"))))))

  (setq org-directory "~/Dropbox/org")
  (setq org-agenda-files '("~/Dropbox/org"))
  (setq org-default-notes-file (concat org-directory "/Notes.org"))

  (eval-after-load "org"
  (progn
    '(setq org-highlight-latex-and-related '(latex script entities))
    '(require 'ox-md nil t)
    '(require 'ox-latex nil t)
    '(require 'ox-reveal nil t)))

  (setq org-todo-keywords
        '((sequence "TODO" "FIXME" "|" "DONE" )))
#+END_SRC

Increse readability of latex preview in org-mode
#+begin_src emacs-lisp
(setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))
#+end_src
Org mode file associations
#+BEGIN_SRC emacs-lisp
(setq org-file-apps
      (append '(
                ("\\.pdf\\'" . "zathura %s")
                ) org-file-apps ))
#+END_SRC

- Add /dot/ to org-babel
- Enable redisplaying images after executing block
- Auto confirm evaluating /dot/
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-src-lang-modes (quote ("dot" . graphviz-dot)))
(org-babel-do-load-languages
 'org-babel-load-languages
 '((dot . t)
  (gnuplot . t)
  (python . t)
  (js . t)
  (shell . t)
  (ipython . t)))
(add-hook 'org-babel-after-execute-hook 'org-redisplay-inline-images)
(setq org-confirm-babel-evaluate nil)
(setq org-src-tab-acts-natively t)
#+END_SRC
Reveal.js presentations
#+BEGIN_SRC emacs-lisp
  (setq org-reveal-root (expand-file-name "~/.local/share/reveal.js-4.1.0"))
#+END_SRC
Export settings
#+BEGIN_SRC emacs-lisp
  (setq org-html-htmlize-output-type 'inline-css)
  (setq org-html-head-include-default-style nil)
#+END_SRC
Setting up spell checking. Working for both laguages, but only one in one buffer.
#+BEGIN_SRC emacs-lisp
(with-eval-after-load "ispell"
  (setq ispell-program-name "hunspell")
  (setq ispell-dictionary "ru_RU,en_US")
  ;; ispell-set-spellchecker-params has to be called
  ;; before ispell-hunspell-add-multi-dic will work
  (ispell-set-spellchecker-params)
  (ispell-hunspell-add-multi-dic "ru_RU,en_US"))
#+END_SRC

**** Publishing
Publishing for:
- Main site
- University consepcts (exporting to pdf and uploading on server)
#+BEGIN_SRC emacs-lisp
  (setq org-publish-project-alist
        '(
          ("org-mainsite"
           :base-directory "~/Documents/MainSite/public/notes"
           :base-extension "org"
           :exclude "level-*.org"
           :publishing-directory "/ssh:iliayar@iliayar.ru:/var/www/mainsite/public/public-notes"
           :recursive t
           :publishing-function org-html-publish-to-html
           :headline-levels 4             ; Just the default for this project.
           :auto-preamble t
           )
          ("static-mainsite"
           :base-directory "~/Documents/MainSite/public/notes"
           :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf"
           :publishing-directory "/ssh:iliayar@iliayar.ru:/var/www/mainsite/public/public-notes"
           :recursive t
           :publishing-function org-publish-attachment
           )
          ("mainsite" :components ("org-mainsite" "static-mainsite"))

          ("org-conspects"
           :base-directory "~/Documents/ITMO"
           :exclude ".*[^E].org"
           :publishing-directory "/ssh:iliayar@iliayar.ru:/var/www/mainsite/public/public-notes/conspects"
           :recursive t
           :publishing-function org-html-publish-to-html
           :headline-levels 4             ; Just the default for this project.
           :auto-preamble t
           )
          ("pdfs-conspects"
           :base-directory "~/Documents/ITMO"
           :base-extension "org"
           :exclude "README.org\\|level-*.org"
           :publishing-directory "/ssh:iliayar@iliayar.ru:/var/www/mainsite/public/public-notes/conspects"
           :recursive t
           :publishing-function org-latex-publish-to-pdf
           )
          ("conspects" :components ("org-conspects" "pdfs-conspects"))
          ))
#+END_SRC
**** LaTeX
Setting up LaTeX additional commands and properties
#+BEGIN_SRC emacs-lisp
  (setq org-latex-header
        (with-temp-buffer
          (insert-file-contents "~/.emacs.d/preamble.sty")
          (buffer-string)))
#+END_SRC
Org mode to LaTeX and pdf
Setting packages
#+BEGIN_SRC emacs-lisp
  (setq org-latex-packages-alist '(
                                   ("T1, T2A" "fontenc" t)
                                   ("lutf8" "luainputenc" t)
                                   ("english,russian" "babel" t)
                                   ("" "minted" t)
                                   ("" "graphicx" t)
                                   ("" "longtable" t)
                                   ("" "hyperref" t)
                                   ("" "xcolor" t)
                                   ("" "natbib" t)
                                   ("" "amssymb" t)
                                   ("" "stmaryrd" t)
                                   ("" "amsmath" t)
                                   ("" "caption" t)
                                   ("" "mathtools" t)
                                   ("" "amsthm" t)
                                   ("" "tikz" t)
                                   ("" "fancyhdr" t)
                                   ("" "lastpage" t)
                                   ("" "titling" t)
                                   ("" "grffile" t)
                                   ("" "extarrows" t)
                                   ("" "wrapfig" t)
                                   ("" "algorithm" t)
                                   ("" "algorithmic" t)
                                   ("" "lipsum" t)
                                   ("" "rotating" t)
                                   ("" "placeins" t)
                                   ("normalem" "ulem" t)
                                   ("" "amsmath" t)
                                   ("" "textcomp" t)
                                   ("" "capt-of" t)))
  ;; Reset default value. For debugging
  (custom-reevaluate-setting 'org-latex-classes)
  (with-eval-after-load 'ox-latex
    (progn 
    (add-to-list 'org-latex-classes
                 (list "general"
                       (concat "
  \\documentclass[english]{article}
  [NO-DEFAULT-PACKAGES]
  [PACKAGES]
  [EXTRA]
  \\usepackage{geometry}
  \\geometry{a4paper,left=2.5cm,top=2cm,right=2.5cm,bottom=2cm,marginparsep=7pt, marginparwidth=.6in}
  " org-latex-header)
                       '("\\section{%s}" . "\\section*{%s}")
                       '("\\subsection{%s}" . "\\subsection*{%s}")
                       '("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                       '("\\paragraph{%s}" . "\\paragraph*{%s}")
                       '("\\subparagraph{%s}" . "\\subparagraph*{%s}")
                       ))
    (add-to-list 'org-latex-classes
                 (list "lectures"
                       (concat "
  \\documentclass[oneside]{book}
  [NO-DEFAULT-PACKAGES]
  [PACKAGES]
  [EXTRA]
  \\addto\\captionsrussian{\\renewcommand{\\chaptername}{–õ–µ–∫—Ü–∏—è}}
  \\renewcommand{\\leftmark}{}
  \\usepackage[a4paper, total={6in, 8in}]{geometry}
  " org-latex-header "\\fancyhead[L]{\\leftmark}")
                       '("\\chapter*{%1$s}\\renewcommand{\\leftmark}{%1$s}\\addcontentsline{toc}{chapter}{%1$s}\\stepcounter{chapter}" . "\\chapter{%s}")
                       '("\\section{%s}" . "\\section*{%s}")
                       '("\\subsection{%s}" . "\\subsection*{%s}")
                       '("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                       '("\\paragraph{%s}" . "\\paragraph*{%s}")
                       '("\\subparagraph{%s}" . "\\subparagraph*{%s}")
                       ))))
  (setq org-latex-listings 'minted
        org-latex-pdf-process
        '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
  (setq org-latex-minted-options
        '(("frame" "lines") ("linenos=true") ("mathescape")))
  (add-to-list 'org-latex-minted-langs '(ipython "python"))
#+END_SRC

*** Functions
Marking headline as done in Study file
#+BEGIN_SRC emacs-lisp
  (defun mark--done (s file)
    (org-map-entries
     (lambda ()
       (let* ((h (org-element-at-point))
              (title (org-element-property :raw-value h)))
         (if (string= title s) (org-todo 'done)))) nil (list (format "~/Dropbox/org/%s.org" file))))
  (defun mark-done (s file)
    (with-current-buffer (find-buffer-visiting (format "~/Dropbox/org/%s.org" file))
      (progn
        (mark--done s file)
        (save-buffer))))
#+END_SRC
*** Other variables
Code::stats
#+BEGIN_SRC emacs-lisp
  (load "~/.emacs.d/private.el")
  (add-hook 'prog-mode-hook #'code-stats-mode)
  (add-hook 'org-mode-hook #'code-stats-mode)
  (run-with-idle-timer 30 t #'code-stats-sync)
  (add-hook 'kill-emacs-hook (lambda () (code-stats-sync :wait)))  
#+END_SRC
#+BEGIN_SRC emacs-lisp
(setq compilation-scroll-output 'first-error)
#+END_SRC
Executable path
#+BEGIN_SRC  emacs-lisp
  (add-to-list 'exec-path "~/.local/bin")
#+END_SRC
- Visual/behaviour
- Dashboard
#+BEGIN_SRC  emacs-lisp
  (defun init-hooks () (global-display-line-numbers-mode 1))

  (scroll-bar-mode 0) ; no scroll bar
  (tool-bar-mode 0) ; no tool bar
  (menu-bar-mode 0) ; no menu bar
  (show-paren-mode 1) ; visualize matching parenthesees
  (global-hl-line-mode 1) ; highlight current line
  (eldoc-mode 1) ; enable docs in minibuffer

  (set-face-attribute 'default nil
                      :family "Fira Code"
                      :height 100)

  (setq company-math-allow-latex-symbols-in-faces t)

  (setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*")))
  (setq dashboard-center-content t)
  (setq dashboard-startup-banner "~/Themes/Neofetch.png")
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)

  (setq dashboard-items '((recents  . 5)
                                          ;(bookmarks . 5)
                          (projects . 5)
                          (agenda . 5)
                          (registers . 5)))

  (add-hook 'after-init-hook 'init-hooks)
#+END_SRC
Some other
#+begin_src emacs-lisp
(add-hook 'shell-mode-hook (lambda () (company-mode nil)))

;; (setq inhibit-startup-screen 1) ; no start screen

(setq ivy-use-selectable-prompt t)

;; store all backups in a single directory 
(setq backup-directory-alist
      `(("." . ,(concat user-emacs-directory "backups"))))

;; y or n instead of yes-or no
(fset 'yes-or-no-p 'y-or-n-p)

;; no annoying bell!
(setq ring-bell-function 'ignore)

;; isearch
(define-key isearch-mode-map (kbd "<down>") 'isearch-ring-advance)
(define-key isearch-mode-map (kbd "<up>") 'isearch-ring-retreat)
(setq case-fold-search t)

(setq projectile-completion-system 'ivy)

(setq ivy-initial-inputs-alist nil)

(setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))

;; set my init filt to be this file
(setq user-init-file "~/.emacs.d/init.el")

;; Evil initial states
(cl-loop for (mode . state) in '( (dired-mode . emacs))
      do (evil-set-initial-state mode state))

;; Highlight TODO colors
(setq hl-todo-keyword-faces
      '(("TODO"   . "#fabd2f")
        ("FIXME"  . "#fb4934")))
#+end_src
** Keybindings
#+begin_src emacs-lisp
  (general-define-key
    :keymaps 'company-active-map
    "<tab>"     'yas-expand
    "<backtab>" 'company-complete-selection)

  (general-define-key
    "M-x" 'counsel-M-x)
#+end_src
Bindings using /general/ package
#+begin_src emacs-lisp
  (general-define-key
    :states '(normal visual emacs insert treemacs)
    :prefix "SPC"
    :non-normal-prefix "M-SPC"
    :keymaps 'override
    "bb" 'ibuffer
    "ca" 'lsp-execute-code-action
    "cc" 'compile
    "cd" 'kill-compilation-buffer
    "cf" 'counsel-grep-or-swiper
    "cl" 'comment-or-uncomment-region
    "cr" 'lsp-rename
    "ff" 'counsel-find-file
    "gl" 'avy-goto-line
    "gr" 'revert-buffer
    "gs" 'avy-goto-char-timer
    "oa" 'org-agenda
    "om" 'magit
    "op" 'treemacs
    "pc" 'projectile-compile-project
    "pf" 'counsel-projectile-find-file
    "pp" 'projectile-switch-project
    "rr" 'rustic-cargo-run
    "sl" 'lsp
    "sr" 'lsp-workspace-restart
    "ss" 'lsp-workspace-shutdown
    "tt" 'treemacs-select-window
    "wd" 'delete-window
    "wk" 'kill-buffer-and-window
    "wr" 'hydra-window-resize-menu/body
    "ww" 'ace-window)

  (general-define-key
    :states '(visual)
    :keymaps 'override
    "R"  'evil-multiedit-match-all
    )

  (general-define-key
    :states '(normal visual insert)
    :prefix "SPC"
    :non-normal-prefix "M-SPC"
    :keymaps 'latex-mode-map
    "si" 'latex-insert-block
    )
#+end_src
Hydra
#+begin_src emacs-lisp
(defhydra hydra-window-resize-menu (:color red
                                    :hint nil)
  "
  Window Resize
  -------------
       /\\
        _k_
  < _h_     _l_ >
        _j_
        v
  "
  ("h" evil-window-decrease-width)
  ("l" evil-window-increase-width)
  ("k" evil-window-decrease-height)
  ("j" evil-window-increase-height)
  ("c" nil "Cancel"))
#+end_src
